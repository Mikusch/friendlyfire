/**
 * Copyright (C) 2022  Mikusch
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

"Games"
{
	"tf"
	{
		"Signatures"
		{
			"CBaseEntity::GetNextThink"
			{
				// string: "firing in: %.2f sec", first call
				"library"	"server"
				"linux" 	"@_ZN11CBaseEntity12GetNextThinkEPKc"
				"windows"	"\x55\x8B\xEC\x8B\x45\x08\x56\x8B\xF1\x85\xC0\x75\x2A\x8B\x86\xD0\x00\x00\x00\x89\x45\x08"
			}
			"CBaseEntity::PhysicsDispatchThink"
			{
				// string: "CBaseEntity::PhysicsDispatchThink"
				"library"	"server"
				"linux" 	"@_ZN11CBaseEntity20PhysicsDispatchThinkEMS_FvvE"
				"windows"	"\x55\x8B\xEC\xA1\x2A\x2A\x2A\x2A\x83\xEC\x08\x83\x78\x30\x00\x53\x57"
			}
			"CWeaponMedigun::AllowedToHealTarget"
			{
				"library"	"server"
				"linux" 	"@_ZN14CWeaponMedigun19AllowedToHealTargetEP11CBaseEntity"
				"windows"	"\x55\x8B\xEC\x53\x8B\xD9\x56\x57\x8B\x93\x10\x02\x00\x00\x85\xD2\x0F\x84\x2A\x2A\x2A\x2A\xB9\xFF\x1F\x00\x00\x83\xFA\xFF\x74\x2A\x0F\xB7\xCA\xA1\x2A\x2A\x2A\x2A\xC1\xE1\x04\x8D\x78\x04\x03\xF9\x0F\x84\x2A\x2A\x2A\x2A\xC1\xEA\x10\x39\x57\x04\x0F\x85\x2A\x2A\x2A\x2A\x8B\x3F\x85\xFF\x0F\x84\x2A\x2A\x2A\x2A\x8B\x07\x8B\xCF\x8B\x80\x4C\x01\x00\x00\xFF\xD0\x84\xC0\x0F\x84\x2A\x2A\x2A\x2A\x8B\x75\x08\x85\xF6\x74\x2A"
			}
			"CBaseEntity::InSameTeam"
			{
				// string: "lowV_debrischunks", long single block, go down a few blocks, first call
				"library"	"server"
				"linux"		"@_ZNK11CBaseEntity10InSameTeamEPKS_"
				"windows"	"\x55\x8B\xEC\x8B\x45\x08\x57\x8B\xF9\x85\xC0"
			}
			"CTFPlayer::ApplyGenericPushbackImpulse"
			{
				// string: "airblast_vertical_vulnerability_multiplier" with 4 calls
				"library"	"server"
				"linux"		"@_ZN9CTFPlayer27ApplyGenericPushbackImpulseERK6VectorPS_"
				"windows"	"\x55\x8B\xEC\x83\xEC\x0C\x53\x57\x8B\xF9\x8D\x8F\xE0\x1A\x00\x00"
			}
			"CTFPlayerShared::StunPlayer"
			{
				// string: "player_stunned"
				"library"	"server"
				"linux"		"@_ZN15CTFPlayerShared10StunPlayerEffiP9CTFPlayer"
				"windows"	"\x55\x8B\xEC\x83\xEC\x24\x57\x8B\xF9\x8B\x87\xE0\x04\x00\x00"
			}
			"GetGlobalTeam"
			{
				// string: "CSquadSpawner: %3.2f: <<<< Spawning Squad >>>>" with a dev message, 1 block down
				"library"	"server"
				"linux"		"@_Z13GetGlobalTeami"
				"windows"	"\x55\x8B\xEC\x8B\x4D\x08\x85\xC9\x78\x2A\x3B\x0D\x2A\x2A\x2A\x2A\x7D\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x04\x88\x5D\xC3"
			}
			"CTFTeam::AddObject"
			{
				// string: "player_dropobject" with only 1 more call in the block,
				// Go up around 6 blocks, very small block, 1 call, it only is connected to 2 functions
				"library"	"server"
				"linux"		"@_ZN7CTFTeam9AddObjectEP11CBaseObject"
				"windows"	"\x55\x8B\xEC\x56\x8B\x75\x08\x57\x8B\xF9\x85\xF6\x74\x2A\x8B\x06\x8B\xCE\xFF\x50\x08\x8B\x00\xEB\x2A\x83\xC8\xFF\x8D\x4D\x08"
			}
			"CTFTeam::RemoveObject"
			{
				// string: "Weapon_Sapper.Timer" with 2 more strings under it, very bottom block
				// Follow the xref, 2nd to last block, follow xref to 2nd function (block has 2 calls)
				"library"	"server"
				"linux"		"@_ZN7CTFTeam12RemoveObjectEP11CBaseObject"
				"windows"	"\x55\x8B\xEC\x56\x8B\xF1\x83\xBE\xF0\x03\x00\x00\x00"
			}
		}
		"Offsets"
		{
			"CBaseProjectile::CanCollideWithTeammates"
			{
				"library"	"server"
				"linux"		"231"
				"windows"	"230"
			}
			"CTFWeaponBase::DeflectProjectiles"
			{
				"library"	"server"
				"linux"		"429"
				"windows"	"422"
			}
			"CTFSniperRifle::GetCustomDamageType"
			{
				"library"	"server"
				"linux"		"389"
				"windows"	"383"
			}
			"CTFSniperRifle::GetPenetrateType"
			{
				"library"	"server"
				"linux"		"410"
				"windows"	"403"
			}
			"CBaseGrenade::Explode"
			{
				"library"	"server"
				"linux"		"237"
				"windows"	"236"
			}
			"CTFBaseRocket::Explode"
			{
				"library"	"server"
				"linux"		"241"
				"windows"	"240"
			}
			"CTeam::AddPlayer"
			{
				"library"	"server"
				"linux"		"210"
				"windows"	"209"
			}
			"CTeam::RemovePlayer"
			{
				"library"	"server"
				"linux"		"211"
				"windows"	"210"
			}
			"CBaseEntity::ChangeTeam"
			{
				"library"	"server"
				"linux"		"98"
				"windows"	"97"
			}
			"CBasePlayer::Event_Killed"
			{
				"library"	"server"
				"linux"		"69"
				"windows"	"68"
			}
			"CTFWeaponBaseMelee::Smack"
			{
				"library"	"server"
				"linux"		"480"
				"windows"	"473"
			}
			"CTFWeaponBase::SecondaryAttack"
			{
				"library"	"server"
				"linux"		"294"
				"windows"	"288"
			}
			"CBaseEntity::Deflected"
			{
				"library"	"server"
				"linux"		"161"
				"windows"	"160"
			}
			"CBaseEntity::VPhysicsUpdate"
			{
				"library"	"server"
				"linux"		"165"
				"windows"	"164"
			}
		}
		"Functions"
		{
			"CBaseEntity::PhysicsDispatchThink"
			{
				"signature"	"CBaseEntity::PhysicsDispatchThink"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"thinkFunc"
					{
						"type"	"int"
					}
				}
			}
			"CWeaponMedigun::AllowedToHealTarget"
			{
				"signature"	"CWeaponMedigun::AllowedToHealTarget"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"pTarget"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CBaseGrenade::Explode"
			{
				"offset"	"CBaseGrenade::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"int"
					}
					"bitsDamageType"
					{
						"type"	"int"
					}
				}
			}
			"CTFBaseRocket::Explode"
			{
				"offset"	"CTFBaseRocket::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"int"
					}
					"pOther"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CBaseProjectile::CanCollideWithTeammates"
			{
				"offset"	"CBaseProjectile::CanCollideWithTeammates"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
			}
			"CTFWeaponBase::DeflectProjectiles"
			{
				"offset"	"CTFWeaponBase::DeflectProjectiles"
				"hooktype"	"entity"
				"return"	"bool"
				"this"		"entity"
			}
			"CTFSniperRifle::GetCustomDamageType"
			{
				"offset"	"CTFSniperRifle::GetCustomDamageType"
				"hooktype"	"entity"
				"return"	"int"
				"this"		"entity"
			}
			"CBasePlayer::Event_Killed"
			{
				"offset"	"CBasePlayer::Event_Killed"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"info"
					{
						"type"	"objectptr"
					}
				}
			}
			"CTFWeaponBaseMelee::Smack"
			{
				"offset"	"CTFWeaponBaseMelee::Smack"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CTFWeaponBase::SecondaryAttack"
			{
				"offset"	"CTFWeaponBase::SecondaryAttack"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CBaseEntity::Deflected"
			{
				"offset"	"CBaseEntity::Deflected"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pDeflectedBy"
					{
						"type"	"cbaseentity"
					}
					"vecDir"
					{
						"type"	"vectorptr"
					}
				}
			}
			"CBaseEntity::VPhysicsUpdate"
			{
				"offset"	"CBaseEntity::VPhysicsUpdate"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pPhysics"
					{
						"type"	"objectptr"
					}
				}
			}
			"CBaseEntity::InSameTeam"
			{
				"signature"	"CBaseEntity::InSameTeam"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				"arguments"
				{
					"pEntity"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CTFPlayer::ApplyGenericPushbackImpulse"
			{
				"signature"	"CTFPlayer::ApplyGenericPushbackImpulse"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"vecImpulse"
					{
						"type"	"vectorptr"
					}
					"pAttacker"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"CTFPlayerShared::StunPlayer"
			{
				"signature"	"CTFPlayerShared::StunPlayer"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"address"
				"arguments"
				{
					"flTime"
					{
						"type"	"float"
					}
					"flReductionAmount"
					{
						"type"	"float"
					}
					"iStunFlags"
					{
						"type"	"int"
					}
					"pAttacker"
					{
						"type"	"cbaseentity"
					}
				}
			}
		}
	}
}
